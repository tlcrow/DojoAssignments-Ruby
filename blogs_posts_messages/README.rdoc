== README

Part 1
1. Create 5 new blogs.
    2.3.1 :003 > blog = Blog.create(name: "animals", description: "This blogs talks about hugging cats")
    (0.1ms)  begin transaction
    SQL (7.8ms)  INSERT INTO "blogs" ("name", "description", "created_at", "updated_at") VALUES (?, ?, ?, ?)  [["name", "animals"], ["description", "This blogs talks about hugging cats"], ["created_at", "2018-04-27 02:35:54.390615"], ["updated_at", "2018-04-27 02:35:54.390615"]]
    (3.1ms)  commit transaction
    +----+---------+------------------------+------------------------+------------------------+
    | id | name    | description            | created_at             | updated_at             |
    +----+---------+------------------------+------------------------+------------------------+
    | 1  | animals | This blogs talks ab... | 2018-04-27 02:35:54... | 2018-04-27 02:35:54... |
    +----+---------+------------------------+------------------------+------------------------+
    1 row in set
    2.3.1 :004 > blog = Blog.create(name: "sandwiches", description: "This blogs talks our favorite sandwiches")
    (0.1ms)  begin transaction
    SQL (5.2ms)  INSERT INTO "blogs" ("name", "description", "created_at", "updated_at") VALUES (?, ?, ?, ?)  [["name", "sandwiches"], ["description", "This blogs talks our favorite sandwiches"], ["created_at", "2018-04-27 02:36:28.516446"], ["updated_at", "2018-04-27 02:36:28.516446"]]
    (3.9ms)  commit transaction
    +----+------------+-----------------------+-----------------------+-----------------------+
    | id | name       | description           | created_at            | updated_at            |
    +----+------------+-----------------------+-----------------------+-----------------------+
    | 2  | sandwiches | This blogs talks o... | 2018-04-27 02:36:2... | 2018-04-27 02:36:2... |
    +----+------------+-----------------------+-----------------------+-----------------------+
    1 row in set
    2.3.1 :005 > blog = Blog.create(name: "clothes", description: "This blogs talks our favorite trends")
    (0.1ms)  begin transaction
    SQL (5.1ms)  INSERT INTO "blogs" ("name", "description", "created_at", "updated_at") VALUES (?, ?, ?, ?)  [["name", "clothes"], ["description", "This blogs talks our favorite trends"], ["created_at", "2018-04-27 02:37:05.195883"], ["updated_at", "2018-04-27 02:37:05.195883"]]
    (3.9ms)  commit transaction
    +----+---------+------------------------+------------------------+------------------------+
    | id | name    | description            | created_at             | updated_at             |
    +----+---------+------------------------+------------------------+------------------------+
    | 3  | clothes | This blogs talks ou... | 2018-04-27 02:37:05... | 2018-04-27 02:37:05... |
    +----+---------+------------------------+------------------------+------------------------+
    1 row in set
    2.3.1 :006 > blog = Blog.create(name: "travel", description: "This blogs talks about the places we want to go")
    (0.5ms)  begin transaction
    SQL (5.9ms)  INSERT INTO "blogs" ("name", "description", "created_at", "updated_at") VALUES (?, ?, ?, ?)  [["name", "travel"], ["description", "This blogs talks about the places we want to go"], ["created_at", "2018-04-27 02:37:45.043863"], ["updated_at", "2018-04-27 02:37:45.043863"]]
    (3.4ms)  commit transaction
    +----+--------+------------------------+------------------------+-------------------------+
    | id | name   | description            | created_at             | updated_at              |
    +----+--------+------------------------+------------------------+-------------------------+
    | 4  | travel | This blogs talks ab... | 2018-04-27 02:37:45... | 2018-04-27 02:37:45 UTC |
    +----+--------+------------------------+------------------------+-------------------------+
    1 row in set
    2.3.1 :007 > blog = Blog.create(name: "books", description: "This blogs talks about our favorite books")
    (0.1ms)  begin transaction
    SQL (5.1ms)  INSERT INTO "blogs" ("name", "description", "created_at", "updated_at") VALUES (?, ?, ?, ?)  [["name", "books"], ["description", "This blogs talks about our favorite books"], ["created_at", "2018-04-27 02:38:28.859835"], ["updated_at", "2018-04-27 02:38:28.859835"]]
    (4.2ms)  commit transaction
    +----+-------+-------------------------+------------------------+-------------------------+
    | id | name  | description             | created_at             | updated_at              |
    +----+-------+-------------------------+------------------------+-------------------------+
    | 5  | books | This blogs talks abo... | 2018-04-27 02:38:28... | 2018-04-27 02:38:28 UTC |
    +----+-------+-------------------------+------------------------+-------------------------+
    1 row in set

2. Create several posts for each blog.
    posts = Post.create(blog:Blog.find_by(name:"animals"), title: "I like dogs", content: "Black dogs, white dogs, orange dogs")
    posts = Post.create(blog:Blog.find_by(name:"sandwiches"), title: "Turkey sandwiches", content: "Turkey sandwiches with mustard")
    posts = Post.create(blog:Blog.find_by(name:"clothes"), title: "Cheap shirts", content: "GAP, Walmart, Old Navy")
    posts = Post.create(blog:Blog.find_by(name:"travel"), title: "Traveling to Europe", content: "Experiences in Italy")
    posts = Post.create(blog:Blog.find_by(name:"books"), title: "Classics", content: "How many have you read")

3. Create several messages for the first post.
    messages = Message.create(post:Post.find(1), author: "Silvester Cat", message: "I am a cat. I want that yellow bird")
    messages = Message.create(post:Post.find(1), author: "Bo Bo Blue", message: "I am embrassed because Tiffany said I am cute")

4.Know how to retrieve all posts for the first blog.
    Blog.first.posts
5. Know how to retrieve all posts for the last blog (sorted by title in the DESC order).
    Blog.last.posts.order('title DESC')

6. Know how to update the first post's title.
    Post.find(1).update(title: "birds")


7. Know how to delete the third post (have the model automatically delete all messages associated with the third post when you delete the third post).
    Post.find(3).destroy

8. Know how to retrieve all blogs.
    Blog.all
    Blog Load (2.6ms)  SELECT "blogs".* FROM "blogs"
    +----+------------+-----------------------+-----------------------+-----------------------+
    | id | name       | description           | created_at            | updated_at            |
    +----+------------+-----------------------+-----------------------+-----------------------+
    | 1  | animals    | This blogs talks a... | 2018-04-27 02:35:5... | 2018-04-27 02:35:5... |
    | 2  | sandwiches | This blogs talks o... | 2018-04-27 02:36:2... | 2018-04-27 02:36:2... |
    | 3  | clothes    | This blogs talks o... | 2018-04-27 02:37:0... | 2018-04-27 02:37:0... |
    | 4  | travel     | This blogs talks a... | 2018-04-27 02:37:4... | 2018-04-27 02:37:4... |
    | 5  | books      | This blogs talks a... | 2018-04-27 02:38:2... | 2018-04-27 02:38:2... |
    +----+------------+-----------------------+-----------------------+-----------------------+
    5 rows in set


9. Know how to retrieve all blogs whose id is less than 5.
    Blog.where("id < ?", 5)

Part 2

1. Create 5 users
  User Load (2.3ms)  SELECT "users".* FROM "users"
  +----+------------+-----------+---------------+---------------+----------------+
  | id | first_name | last_name | email_address | created_at    | updated_at     |
  +----+------------+-----------+---------------+---------------+----------------+
  | 1  | Free       | Willy     | whale@whal... | 2018-05-09... | 2018-05-09 ... |
  | 2  | Mickey     | Mouse     | mouse@mous... | 2018-05-09... | 2018-05-09 ... |
  | 3  | Daffy      | Duck      | duck@duck.com | 2018-05-09... | 2018-05-09 ... |
  | 4  | Simba      | Lion      | lion@lion.com | 2018-05-09... | 2018-05-09 ... |
  | 5  | Charlie    | Unicorn   | unicorn@un... | 2018-05-09... | 2018-05-09 ... |
  +----+------------+-----------+---------------+---------------+----------------+
  5 rows in set

2. Create 5 blogs
  2.3.1 :009 > Blog.all
  Blog Load (2.7ms)  SELECT "blogs".* FROM "blogs"
  +----+------------+-------------------+-------------------+--------------------+
  | id | name       | description       | created_at        | updated_at         |
  +----+------------+-------------------+-------------------+--------------------+
  | 1  | animals    | This blogs tal... | 2018-04-27 02:... | 2018-04-27 02:3... |
  | 2  | sandwiches | This blogs tal... | 2018-04-27 02:... | 2018-04-27 02:3... |
  | 3  | clothes    | This blogs tal... | 2018-04-27 02:... | 2018-04-27 02:3... |
  | 4  | travel     | This blogs tal... | 2018-04-27 02:... | 2018-04-27 02:3... |
  | 5  | books      | This blogs tal... | 2018-04-27 02:... | 2018-04-27 02:3... |
  | 6  | Red        | All things red    | 2018-05-09 23:... | 2018-05-09 23:1... |
  +----+------------+-------------------+-------------------+--------------------+
  6 rows in set

3. Have the first 3 blogs be owned by the first user_id
2.3.1 :015 > user = User.first
  User Load (2.5ms)  SELECT  "users".* FROM "users"  ORDER BY "users"."id" ASC LIMIT 1
  +----+------------+-----------+---------------+---------------+----------------+
  | id | first_name | last_name | email_address | created_at    | updated_at     |
  +----+------------+-----------+---------------+---------------+----------------+
  | 1  | Free       | Willy     | whale@whal... | 2018-05-09... | 2018-05-09 ... |
  +----+------------+-----------+---------------+---------------+----------------+
  1 row in set
  2.3.1 :016 > blog = Blog.first
    Blog Load (2.5ms)  SELECT  "blogs".* FROM "blogs"  ORDER BY "blogs"."id" ASC LIMIT 1
  +----+---------+--------------------+--------------------+---------------------+
  | id | name    | description        | created_at         | updated_at          |
  +----+---------+--------------------+--------------------+---------------------+
  | 1  | animals | This blogs talk... | 2018-04-27 02:3... | 2018-04-27 02:35... |
  +----+---------+--------------------+--------------------+---------------------+
  1 row in set
  2.3.1 :017 > user.owners.create(blog: blog)
     (0.0ms)  begin transaction
    SQL (656.0ms)  INSERT INTO "owners" ("blog_id", "user_id", "created_at", "updated_at") VALUES (?, ?, ?, ?)  [["blog_id", 1], ["user_id", 1], ["created_at", "2018-05-09 23:28:33.296169"], ["updated_at", "2018-05-09 23:28:33.296169"]]
     (4.4ms)  commit transaction
  +----+---------+---------+-------------------------+-------------------------+
  | id | user_id | blog_id | created_at              | updated_at              |
  +----+---------+---------+-------------------------+-------------------------+
  | 1  | 1       | 1       | 2018-05-09 23:28:33 UTC | 2018-05-09 23:28:33 UTC |
  +----+---------+---------+-------------------------+-------------------------+
  1 row in set
  2.3.1 :022 > Owner.all
  Owner Load (2.4ms)  SELECT "owners".* FROM "owners"
  +----+---------+---------+-------------------------+-------------------------+
  | id | user_id | blog_id | created_at              | updated_at              |
  +----+---------+---------+-------------------------+-------------------------+
  | 1  | 1       | 1       | 2018-05-09 23:28:33 UTC | 2018-05-09 23:28:33 UTC |
  | 2  | 1       | 2       | 2018-05-09 23:28:57 UTC | 2018-05-09 23:28:57 UTC |
  | 3  | 1       | 3       | 2018-05-09 23:29:09 UTC | 2018-05-09 23:29:09 UTC |
  +----+---------+---------+-------------------------+-------------------------+
  3 rows in set

4. Have the 4th blog you create be owned by the second user
2.3.1 :027 > user.owners.create(blog: blog)
   (0.2ms)  begin transaction
  SQL (6.2ms)  INSERT INTO "owners" ("blog_id", "user_id", "created_at", "updated_at") VALUES (?, ?, ?, ?)  [["blog_id", 4], ["user_id", 2], ["created_at", "2018-05-09 23:33:43.934595"], ["updated_at", "2018-05-09 23:33:43.934595"]]
   (4.4ms)  commit transaction
  +----+---------+---------+-------------------------+-------------------------+
  | id | user_id | blog_id | created_at              | updated_at              |
  +----+---------+---------+-------------------------+-------------------------+
  | 4  | 2       | 4       | 2018-05-09 23:33:43 UTC | 2018-05-09 23:33:43 UTC |
  +----+---------+---------+-------------------------+-------------------------+
  1 row in set

5. Have the 5th blog you create be owned by the last user
  2.3.1 :030 > user.owners.create(blog: blog)
     (0.1ms)  begin transaction
    SQL (5.8ms)  INSERT INTO "owners" ("blog_id", "user_id", "created_at", "updated_at") VALUES (?, ?, ?, ?)  [["blog_id", 5], ["user_id", 5], ["created_at", "2018-05-09 23:34:57.130027"], ["updated_at", "2018-05-09 23:34:57.130027"]]
     (3.6ms)  commit transaction
  +----+---------+---------+-------------------------+-------------------------+
  | id | user_id | blog_id | created_at              | updated_at              |
  +----+---------+---------+-------------------------+-------------------------+
  | 5  | 5       | 5       | 2018-05-09 23:34:57 UTC | 2018-05-09 23:34:57 UTC |
  +----+---------+---------+-------------------------+-------------------------+
  1 row in set

6. Have the third user own all of the blogs that were created_at
Owner Load (2.3ms)  SELECT "owners".* FROM "owners"
  +----+---------+---------+-------------------------+-------------------------+
  | id | user_id | blog_id | created_at              | updated_at              |
  +----+---------+---------+-------------------------+-------------------------+
  | 1  | 1       | 1       | 2018-05-09 23:28:33 UTC | 2018-05-09 23:28:33 UTC |
  | 2  | 1       | 2       | 2018-05-09 23:28:57 UTC | 2018-05-09 23:28:57 UTC |
  | 3  | 1       | 3       | 2018-05-09 23:29:09 UTC | 2018-05-09 23:29:09 UTC |
  | 4  | 2       | 4       | 2018-05-09 23:33:43 UTC | 2018-05-09 23:33:43 UTC |
  | 5  | 5       | 5       | 2018-05-09 23:34:57 UTC | 2018-05-09 23:34:57 UTC |
  | 6  | 3       | 1       | 2018-05-09 23:37:43 UTC | 2018-05-09 23:37:43 UTC |
  | 7  | 3       | 2       | 2018-05-09 23:37:50 UTC | 2018-05-09 23:37:50 UTC |
  | 8  | 3       | 3       | 2018-05-09 23:37:55 UTC | 2018-05-09 23:37:55 UTC |
  | 9  | 3       | 4       | 2018-05-09 23:38:01 UTC | 2018-05-09 23:38:01 UTC |
  | 10 | 3       | 5       | 2018-05-09 23:38:06 UTC | 2018-05-09 23:38:06 UTC |
  | 11 | 3       | 6       | 2018-05-09 23:38:11 UTC | 2018-05-09 23:38:11 UTC |
  +----+---------+---------+-------------------------+-------------------------+
  11 rows in set

7. Have the first user create 3 posts for the blog with an id of 2
Post Load (2.3ms)  SELECT "posts".* FROM "posts"
  +----+---------+-------------+------------+------------+-------------+---------+
  | id | blog_id | title       | content    | created_at | updated_at  | user_id |
  +----+---------+-------------+------------+------------+-------------+---------+
  | 2  | 1       | Roast Beef  | Black d... | 2018-04... | 2018-04-... |         |
  | 4  | 2       | Turkey s... | Turkey ... | 2018-04... | 2018-04-... |         |
  | 5  | 3       | Expensiv... | Prada, ... | 2018-04... | 2018-04-... |         |
  | 6  | 3       | Cheap sh... | GAP, Wa... | 2018-04... | 2018-04-... |         |
  | 7  | 4       | Travelin... | Experie... | 2018-04... | 2018-04-... |         |
  | 8  | 4       | Travelin... | Experie... | 2018-04... | 2018-04-... |         |
  | 9  | 5       | Harry Po... | Have yo... | 2018-04... | 2018-04-... |         |
  | 10 | 5       | Classics    | How man... | 2018-04... | 2018-04-... |         |
  | 11 | 2       | Eastside    | Philly ... | 2018-05... | 2018-05-... | 1       |
  | 12 | 2       | Westside    | Avocado... | 2018-05... | 2018-05-... | 1       |
  | 13 | 2       | Southside   | Pulled ... | 2018-05... | 2018-05-... | 1       |
  +----+---------+-------------+------------+------------+-------------+---------+

8. Have the second user create 5 posts for the last Blog.
  +----+---------+-------------+------------+------------+-------------+---------+
  | id | blog_id | title       | content    | created_at | updated_at  | user_id |
  +----+---------+-------------+------------+------------+-------------+---------+
  | 2  | 1       | Roast Beef  | Black d... | 2018-04... | 2018-04-... |         |
  | 4  | 2       | Turkey s... | Turkey ... | 2018-04... | 2018-04-... |         |
  | 5  | 3       | Expensiv... | Prada, ... | 2018-04... | 2018-04-... |         |
  | 6  | 3       | Cheap sh... | GAP, Wa... | 2018-04... | 2018-04-... |         |
  | 7  | 4       | Travelin... | Experie... | 2018-04... | 2018-04-... |         |
  | 8  | 4       | Travelin... | Experie... | 2018-04... | 2018-04-... |         |
  | 9  | 5       | Harry Po... | Have yo... | 2018-04... | 2018-04-... |         |
  | 10 | 5       | Classics    | How man... | 2018-04... | 2018-04-... |         |
  | 11 | 2       | Eastside    | Philly ... | 2018-05... | 2018-05-... | 1       |
  | 12 | 2       | Westside    | Avocado... | 2018-05... | 2018-05-... | 1       |
  | 13 | 2       | Southside   | Pulled ... | 2018-05... | 2018-05-... | 1       |
  | 14 | 6       | red candy   | Twizzlers  | 2018-05... | 2018-05-... | 2       |
  | 15 | 6       | red clothes | Pokka Dots | 2018-05... | 2018-05-... | 2       |
  | 16 | 6       | red hair    | Ariel t... | 2018-05... | 2018-05-... | 2       |
  | 17 | 6       | red cat     | The nam... | 2018-05... | 2018-05-... | 2       |
  | 18 | 6       | red car     | A Ferari   | 2018-05... | 2018-05-... | 2       |
  +----+---------+-------------+------------+------------+-------------+---------+
  16 rows in set

9. Have the 3rd user create several posts for different blogs
  +----+---------+-------------+------------+------------+-------------+---------+
  | id | blog_id | title       | content    | created_at | updated_at  | user_id |
  +----+---------+-------------+------------+------------+-------------+---------+
  | 2  | 1       | Roast Beef  | Black d... | 2018-04... | 2018-05-... | 3       |
  | 4  | 2       | Turkey s... | Turkey ... | 2018-04... | 2018-04-... |         |
  | 5  | 3       | Expensiv... | Prada, ... | 2018-04... | 2018-05-... | 3       |
  | 6  | 3       | Cheap sh... | GAP, Wa... | 2018-04... | 2018-04-... |         |
  | 7  | 4       | Travelin... | Experie... | 2018-04... | 2018-05-... | 3       |
  | 8  | 4       | Travelin... | Experie... | 2018-04... | 2018-04-... |         |
  | 9  | 5       | Harry Po... | Have yo... | 2018-04... | 2018-04-... |         |
  | 10 | 5       | Classics    | How man... | 2018-04... | 2018-04-... |         |
  | 11 | 2       | Eastside    | Philly ... | 2018-05... | 2018-05-... | 1       |
  | 12 | 2       | Westside    | Avocado... | 2018-05... | 2018-05-... | 1       |
  | 13 | 2       | Southside   | Pulled ... | 2018-05... | 2018-05-... | 1       |
  | 14 | 6       | red candy   | Twizzlers  | 2018-05... | 2018-05-... | 2       |
  | 15 | 6       | red clothes | Pokka Dots | 2018-05... | 2018-05-... | 2       |
  | 16 | 6       | red hair    | Ariel t... | 2018-05... | 2018-05-... | 2       |
  | 17 | 6       | red cat     | The nam... | 2018-05... | 2018-05-... | 2       |
  | 18 | 6       | red car     | A Ferari   | 2018-05... | 2018-05-... | 2       |
  +----+---------+-------------+------------+------------+-------------+---------+
  16 rows in set

10. Have the 3rd user create 2 messages for the first post created and 3 messages for the second
Message Load (2.4ms)  SELECT "messages".* FROM "messages"
  +----+---------+--------+--------------+--------------+--------------+---------+
  | id | post_id | author | message      | created_at   | updated_at   | user_id |
  +----+---------+--------+--------------+--------------+--------------+---------+
  | 3  | 2       | me     | We all li... | 2018-05-1... | 2018-05-1... | 3       |
  | 4  | 2       | me     | I don't l... | 2018-05-1... | 2018-05-1... | 3       |
  | 5  | 4       | me     | I don't l... | 2018-05-1... | 2018-05-1... | 3       |
  | 6  | 4       | me     | Everyone ... | 2018-05-1... | 2018-05-1... | 3       |
  | 7  | 4       | me     | She likes... | 2018-05-1... | 2018-05-1... | 3       |
  +----+---------+--------+--------------+--------------+--------------+---------+

11. Have the 4th user create 3 messages for the last post you created
  Message Load (2.3ms)  SELECT "messages".* FROM "messages"
  +----+---------+--------+--------------+--------------+--------------+---------+
  | id | post_id | author | message      | created_at   | updated_at   | user_id |
  +----+---------+--------+--------------+--------------+--------------+---------+
  | 3  | 2       | me     | We all li... | 2018-05-1... | 2018-05-1... | 3       |
  | 4  | 2       | me     | I don't l... | 2018-05-1... | 2018-05-1... | 3       |
  | 5  | 4       | me     | I don't l... | 2018-05-1... | 2018-05-1... | 3       |
  | 6  | 4       | me     | Everyone ... | 2018-05-1... | 2018-05-1... | 3       |
  | 7  | 4       | me     | She likes... | 2018-05-1... | 2018-05-1... | 3       |
  | 8  | 18      | me     | We all li... | 2018-05-1... | 2018-05-1... | 4       |
  | 9  | 18      | me     | These mes... | 2018-05-1... | 2018-05-1... | 4       |
  | 10 | 18      | me     | I am runn... | 2018-05-1... | 2018-05-1... | 4       |
  +----+---------+--------+--------------+--------------+--------------+---------+
  8 rows in set

12.Change the owner of the 2nd post to the last user
Post Load (2.7ms)  SELECT  "posts".* FROM "posts" WHERE "posts"."id" = ? LIMIT 1  [["id", 2]]
  +----+---------+------------+------------+------------+--------------+---------+
  | id | blog_id | title      | content    | created_at | updated_at   | user_id |
  +----+---------+------------+------------+------------+--------------+---------+
  | 2  | 1       | Roast Beef | Black d... | 2018-04... | 2018-05-1... | 5       |
  +----+---------+------------+------------+------------+--------------+---------+
  1 row in set

13. Change the 2nd post's content to be something else
Post Load (2.4ms)  SELECT  "posts".* FROM "posts" WHERE "posts"."id" = ? LIMIT 1  [["id", 2]]
  +----+---------+------------+------------+-------------+-------------+---------+
  | id | blog_id | title      | content    | created_at  | updated_at  | user_id |
  +----+---------+------------+------------+-------------+-------------+---------+
  | 2  | 1       | Roast Beef | Changed... | 2018-04-... | 2018-05-... | 5       |
  +----+---------+------------+------------+-------------+-------------+---------+
  1 row in set

14. Retrieve all blogs owned by the 3rd user
  User.find(3).blogs
  Blog Load (1.2ms)  SELECT "blogs".* FROM "blogs" INNER JOIN "owners" ON "blogs"."id" = "owners"."blog_id" WHERE "owners"."user_id" = ?  [["user_id", 3]]
  +----+------------+-------------------+-------------------+--------------------+
  | id | name       | description       | created_at        | updated_at         |
  +----+------------+-------------------+-------------------+--------------------+
  | 1  | animals    | This blogs tal... | 2018-04-27 02:... | 2018-04-27 02:3... |
  | 2  | sandwiches | This blogs tal... | 2018-04-27 02:... | 2018-04-27 02:3... |
  | 3  | clothes    | This blogs tal... | 2018-04-27 02:... | 2018-04-27 02:3... |
  | 4  | travel     | This blogs tal... | 2018-04-27 02:... | 2018-04-27 02:3... |
  | 5  | books      | This blogs tal... | 2018-04-27 02:... | 2018-04-27 02:3... |
  | 6  | Red        | All things red    | 2018-05-09 23:... | 2018-05-09 23:1... |
  +----+------------+-------------------+-------------------+--------------------+
  6 rows in set

15. Retrieve all posts that were created by the 3rd user
2.3.1 :011 > Post.where("user_id = 3")
  Post Load (6.1ms)  SELECT "posts".* FROM "posts" WHERE (user_id = 3)
  +----+---------+-------------+------------+------------+-------------+---------+
  | id | blog_id | title       | content    | created_at | updated_at  | user_id |
  +----+---------+-------------+------------+------------+-------------+---------+
  | 5  | 3       | Expensiv... | Prada, ... | 2018-04... | 2018-05-... | 3       |
  | 7  | 4       | Travelin... | Experie... | 2018-04... | 2018-05-... | 3       |
  +----+---------+-------------+------------+------------+-------------+---------+
  2 rows in set

16. Retrieve all messages left by the 3rd user
  2.3.1 :012 > Message.where("user_id = 3")
  Message Load (5.5ms)  SELECT "messages".* FROM "messages" WHERE (user_id = 3)
  +----+---------+--------+--------------+--------------+--------------+---------+
  | id | post_id | author | message      | created_at   | updated_at   | user_id |
  +----+---------+--------+--------------+--------------+--------------+---------+
  | 3  | 2       | me     | We all li... | 2018-05-1... | 2018-05-1... | 3       |
  | 4  | 2       | me     | I don't l... | 2018-05-1... | 2018-05-1... | 3       |
  | 5  | 4       | me     | I don't l... | 2018-05-1... | 2018-05-1... | 3       |
  | 6  | 4       | me     | Everyone ... | 2018-05-1... | 2018-05-1... | 3       |
  | 7  | 4       | me     | She likes... | 2018-05-1... | 2018-05-1... | 3       |
  +----+---------+--------+--------------+--------------+--------------+---------+
  5 rows in set

17. Retrieve all posts associated with the blog id 6 as well as who left those posts
  Post.joins(:user).where("posts.blog_id = '6'")
  Post Load (2.5ms)  SELECT "posts".* FROM "posts" INNER JOIN "users" ON "users"."id" = "posts"."user_id" WHERE (posts.blog_id = '6')
  +----+---------+-------------+------------+------------+-------------+---------+
  | id | blog_id | title       | content    | created_at | updated_at  | user_id |
  +----+---------+-------------+------------+------------+-------------+---------+
  | 14 | 6       | red candy   | Twizzlers  | 2018-05... | 2018-05-... | 2       |
  | 15 | 6       | red clothes | Pokka Dots | 2018-05... | 2018-05-... | 2       |
  | 16 | 6       | red hair    | Ariel t... | 2018-05... | 2018-05-... | 2       |
  | 17 | 6       | red cat     | The nam... | 2018-05... | 2018-05-... | 2       |
  | 18 | 6       | red car     | A Ferari   | 2018-05... | 2018-05-... | 2       |
  +----+---------+-------------+------------+------------+-------------+---------+
  5 rows in set

18. Retrieve all messages associated with the blog id 6 along with all the user information of those who left the messages
  2.3.1 :096 > messages = Message.joins(:post).where("posts.blog_id = '6'")
    Message Load (2.0ms)  SELECT "messages".* FROM "messages" INNER JOIN "posts" ON "posts"."id" = "messages"."post_id" WHERE (posts.blog_id = '6')
  +----+---------+--------+--------------+--------------+--------------+---------+
  | id | post_id | author | message      | created_at   | updated_at   | user_id |
  +----+---------+--------+--------------+--------------+--------------+---------+
  | 8  | 18      | me     | We all li... | 2018-05-1... | 2018-05-1... | 4       |
  | 9  | 18      | me     | These mes... | 2018-05-1... | 2018-05-1... | 4       |
  | 10 | 18      | me     | I am runn... | 2018-05-1... | 2018-05-1... | 4       |
  +----+---------+--------+--------------+--------------+--------------+---------+
  3 rows in set
  2.3.1 :097 > User.find(4)
    User Load (2.0ms)  SELECT  "users".* FROM "users" WHERE "users"."id" = ? LIMIT 1  [["id", 4]]
  +----+------------+-----------+---------------+---------------+----------------+
  | id | first_name | last_name | email_address | created_at    | updated_at     |
  +----+------------+-----------+---------------+---------------+----------------+
  | 4  | Simba      | Lion      | lion@lion.com | 2018-05-09... | 2018-05-09 ... |
  +----+------------+-----------+---------------+---------------+----------------+
  1 row in set

19. Grab all user information of those that own the first blog
  User Load (1.5ms)  SELECT "users".* FROM "users" INNER JOIN "owners" ON "users"."id" = "owners"."user_id" WHERE "owners"."blog_id" = ?  [["blog_id", 1]]
  +----+------------+-----------+---------------+---------------+----------------+
  | id | first_name | last_name | email_address | created_at    | updated_at     |
  +----+------------+-----------+---------------+---------------+----------------+
  | 1  | Free       | Willy     | whale@whal... | 2018-05-09... | 2018-05-09 ... |
  | 3  | Daffy      | Duck      | duck@duck.com | 2018-05-09... | 2018-05-09 ... |
  +----+------------+-----------+---------------+---------------+----------------+
  2 rows in set

20. Change it so that the first blog is no longer owned by the first user
  user = Owner.where(user_id: 1).where(blog_id: 1)
  Owner.destroy(user)
  DEPRECATION WARNING: You are passing an instance of ActiveRecord::Base to `find`. Please pass the id of the object by calling `.id`. (called from irb_binding at (irb):77)
    Owner Load (1.8ms)  SELECT  "owners".* FROM "owners" WHERE "owners"."id" = ? LIMIT 1  [["id", 2]]
     (0.1ms)  begin transaction
    SQL (4.5ms)  DELETE FROM "owners" WHERE "owners"."id" = ?  [["id", 2]]
     (63.6ms)  commit transaction
  +----+---------+---------+-------------------------+-------------------------+
  | id | user_id | blog_id | created_at              | updated_at              |
  +----+---------+---------+-------------------------+-------------------------+
  | 2  | 1       | 2       | 2018-05-09 23:28:57 UTC | 2018-05-09 23:28:57 UTC |
  +----+---------+---------+-------------------------+-------------------------+
  1 row in set
